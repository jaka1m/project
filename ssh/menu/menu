#!/bin/bash
# Menu For Script
# Edition : Stable Edition V3.0
# (C) Copyright 2022-2023
# =========================================
# // Export Color & Information
export RED='\033[0;31m'
export GREEN='\033[0;32m'
export YELLOW='\033[0;33m'
export BLUE='\033[0;34m'
export PURPLE='\033[0;35m'
export CYAN='\033[0;36m'
export LIGHT='\033[0;37m'
export NC='\033[0m'
# COLOR VALIDATION
L1="\e[0m\e[1;77m"
NC='\033[0m'
magenta="\033[1;35m"
Green="\e[92;1m"
white="\033[1;37m"
BLUE="\033[36m"
red="\033[1;31m"
black="\033[1;40;30m"
yellow="\033[1;33m"
cyan="\033[1;36m"
reset="\033[0m"
bgyellow="\033[1;43;33m"
bgwhite="\033[1;47;37m"
bru="\033[0;36m"
c0=${reset}
c1=${magenta}
c2=${Green}
c3=${white}
c4=${BLUE}
c5=${red}
c6=${yellow}
c7=${cyan}
c8=${black}
c9=${bgyellow}
c10=${bgwhite}
c11=${bru}
clear

# // Export Banner Status Information
export EROR="[${RED} ERROR ${NC}]"
export INFO="[${YELLOW} INFO ${NC}]"
export OKEY="[${GREEN} OKEY ${NC}]"
export PENDING="[${YELLOW} PENDING ${NC}]"
export SEND="[${YELLOW} SEND ${NC}]"
export RECEIVE="[${YELLOW} RECEIVE ${NC}]"

# // Exporting URL Host
systemctl restart geo
chmod 777 /usr/local/sbin/*
export Server_URL="raw.githubusercontent.com/jaka1m/project/main"
export Server_URLL="raw.githubusercontent.com/jaka1m/perizinan/main"
export Server_Port="443"
export Server_IP="underfined"
export Script_Mode="Stable"
export Auther="geovpn"
export VERSION="3.1"
echo "${VERSION}" > /etc/${Auther}/version.db

# // Exporting IP Address
export IP=$( curl -sS ipv4.icanhazip.com)

# // Exporting Network Interface
export NETWORK_IFACE="$(ip route show to default | awk '{print $5}')"

MYIP=$(curl -sS ipv4.icanhazip.com)
ISP=$(cat /etc/xray/isp)
CITY=$(cat /etc/xray/city)
domain=$(cat /etc/xray/domain)
PUB=$(cat /etc/slowdns/server.pub)
NS=$(cat /etc/xray/ns.txt)
uptime="$(uptime -p | cut -d " " -f 2-10)"
RAM=$(free -m | awk 'NR==2 {print $2}')
USAGERAM=$(free -m | awk 'NR==2 {print $3}')
MEMOFREE=$(printf '%-1s' "$(free -m | awk 'NR==2{printf "%.2f%%", $3*100/$2 }')")
LOADCPU=$(printf '%-0.00001s' "$(top -bn1 | awk '/Cpu/ { cpu = "" 100 - $8 "%" }; END { print cpu }')")
MODEL=$(cat /etc/os-release | grep -w PRETTY_NAME | head -n1 | sed 's/=//g' | sed 's/"//g' | sed 's/PRETTY_NAME//g')
CORE=$(printf '%-1s' "$(grep -c cpu[0-9] /proc/stat)")
DATEVPS=$(date +'%d-%B-%Y')
TIMEZONE=$(printf '%(%H:%M:%S)T')
SERONLINE=$(uptime -p | cut -d " " -f 2-10000)
clear

# // Validate Result ( 1 )
touch /etc/${Auther}/license.key
export Your_License_Key="$( cat /etc/${Auther}/license.key | awk '{print $1}' )"
export Validated_Your_License_Key_With_Server="$( curl -s https://${Server_URLL}/registered.txt | grep -w $Your_License_Key | head -n1 | cut -d ' ' -f 1 )"
if [[ "$Validated_Your_License_Key_With_Server" == "$Your_License_Key" ]]; then
    validated='true'
else
    echo -e "${EROR} License Key Not Valid"
    exit 1
fi

# // Checking Script Expired
exp=$( curl -s https://${Server_URLL}/registered.txt | grep -w $Your_License_Key | cut -d ' ' -f 4 )
now=`date -d "0 days" +"%Y-%m-%d"`
expired_date=$(date -d "$exp" +%s)
now_date=$(date -d "$now" +%s)
sisa_hari=$(( ($expired_date - $now_date) / 86400 ))
if [[ $sisa_hari -lt 0 ]]; then
    echo $sisa_hari > /etc/${Auther}/license-remaining-active-days.db
    echo -e "${EROR} Your License Key Expired ( $sisa_hari Days )"
    exit 1
else
    echo $sisa_hari > /etc/${Auther}/license-remaining-active-days.db
fi

# // Clear
clear
clear && clear && clear
clear;clear;clear

# // License Status
if [[ $( cat /etc/${Auther}/license-remaining-active-days.db | awk '{print $1}' ) -lt 0 ]]; then
    export Status_License="${RED}NOT ACTIVATED"
else
    export Status_License="${GREEN}ACTIVATED"
fi

# // Exporting RED BG
export RED_BG='\e[41m'

# // Exporting Addons Tools
export End_License=$( curl -s https://${Server_URLL}/registered.txt | grep -w $Your_License_Key | cut -d ' ' -f 4 | awk '{print $1}' );
export Start_License=$( curl -s https://${Server_URLL}/registered.txt | grep -w $Your_License_Key | cut -d ' ' -f 3 | awk '{print $1}' );
export Issue_License=$( curl -s https://${Server_URLL}/registered.txt | grep -w $Your_License_Key | cut -d ' ' -f 9-100 | awk '{print $1}' );
export Limit_License=$( curl -s https://${Server_URLL}/registered.txt | grep -w $Your_License_Key | cut -d ' ' -f 2 | awk '{print $1}' );
export Sekarang=`date -d "0 days" +"%Y-%m-%d"`
export Tanggal_Expired_Dalam_Hitungan_Detik=$(date -d "$End_License" +%s)
export Tanggal_Sekarang_Dalam_Hitungan_Detik=$(date -d "$Sekarang" +%s)
export Sisa_Hari_Masa_Aktif=$(( ($Tanggal_Expired_Dalam_Hitungan_Detik - $Tanggal_Sekarang_Dalam_Hitungan_Detik) / 86400 ))

#STATUS
clear
ssh_service=$(/etc/init.d/ssh status | grep Active | awk '{print $3}' | cut -d "(" -f2 | cut -d ")" -f1)
bot_service=$(systemctl status geo | grep Active | awk '{print $3}' | cut -d "(" -f2 | cut -d ")" -f1)
haproxy_service=$(systemctl status haproxy | grep Active | awk '{print $3}' | cut -d "(" -f2 | cut -d ")" -f1)
xray_service=$(systemctl status xray | grep Active | awk '{print $3}' | cut -d "(" -f2 | cut -d ")" -f1)
nginx_service=$(systemctl status nginx | grep Active | awk '{print $3}' | cut -d "(" -f2 | cut -d ")" -f1)
#Status | Geo Project
clear
# STATUS SERVICE  SSH 
if [[ $ssh_service == "running" ]]; then 
   status_ssh="${GREEN}ON${NC}"
else
   status_ssh="${c5}OFF${NC} "
fi

# // SSH Websocket Proxy
ssh_ws=$( systemctl status ws | grep Active | awk '{print $3}' | sed 's/(//g' | sed 's/)//g' )
if [[ $ssh_ws == "running" ]]; then
    status_ws_epro="${GREEN}ON${NC}"
else
    status_ws_epro="${c5}OFF${NC} "
fi

# STATUS SERVICE HAPROXY
if [[ $haproxy_service == "running" ]]; then 
   status_haproxy="${GREEN}ON${NC}"
else
   status_haproxy="${c5}OFF${NC} "
fi

# STATUS SERVICE XRAY
if [[ $xray_service == "running" ]]; then 
   status_xray="${GREEN}ON${NC}"
else
   status_xray="${c5}OFF${NC} "
fi

# STATUS SERVICE NGINX
if [[ $nginx_service == "running" ]]; then 
   status_nginx="${GREEN}ON${NC}"
else
   status_nginx="${c5}OFF${NC} "
fi

# STATUS SERVICE BOT
if [[ $bot_service == "running" ]]; then 
   status_bot="${GREEN}ON${NC}"
else
   status_bot="${c5}OFF${NC} "
fi
if [ ! -e /etc/vmess ]; then
    mkdir -p /etc/vmess
    touch /etc/vmess/.vmess.db
fi
vms=$(cat /etc/vmess/.vmess.db)
if [[ $vms = "" ]]; then
    vm="0"
else
    vm=$(cat /etc/vmess/.vmess.db | grep "###" | wc -l)
fi

if [ ! -e /etc/vless ]; then
    mkdir -p /etc/vless
    touch /etc/vless/.vless.db
fi
vms=$(cat /etc/vless/.vless.db)
if [[ $vms = "" ]]; then
    vl="0"
else
    vl=$(cat /etc/vless/.vless.db | grep "###" | wc -l)
fi
echo ""
if [ ! -e /etc/trojan ]; then
    mkdir -p /etc/trojan
    touch /etc/trojan/.trojan.db
fi
vms=$(cat /etc/trojan/.trojan.db)
if [[ $vms = "" ]]; then
    tr="0"
else
    tr=$(cat /etc/trojan/.trojan.db | grep "###" | wc -l)
fi
if [ ! -e /etc/shadowsocks ]; then
    mkdir -p /etc/shadowsocks
    touch /etc/shadowsocks/.shadowsocks.db
fi
vms=$(cat /etc/shadowsocks/.shadowsocks.db)
if [[ $vms = "" ]]; then
    ss="0"
else
    ss=$(cat /etc/shadowsocks/.shadowsocks.db | grep "###" | wc -l)
fi
if [ ! -e /etc/ssh ]; then
    mkdir -p /etc/ssh
    touch /etc/ssh/.ssh.db
fi
vms=$(cat /etc/ssh/.ssh.db)
if [[ $vms = "" ]]; then
    ssh="0"
else
    ssh=$(cat /etc/ssh/.ssh.db | grep "###" | wc -l)
fi

clear
#echo -e "${L1}${YELLOW}-----------------------------------------------------------${NC}"
#echo -e "  ${L1}Welcome To ${L1}${GREEN}Geo Project ${NC}${L1}$Script Installer ${L1}${YELLOW}(${NC}${L1}${GREEN}Stable Edition${NC}${L1}${YELLOW})${NC}"
#echo -e "     ${L1}This Will Quick Setup VPN Server On Your Server"
#echo -e "         ${L1}Auther : ${GREEN}MUHAMMAD AMIN ${NC}${L1}${YELLOW}(${NC} ${L1}${GREEN}Geo Project ${NC}${L1}${YELLOW})${NC}"
#echo -e "       ${L1}© Copyright By Geo Project ${YELLOW}(${NC} ${L1}2022-2023 ${YELLOW})${NC}"
#echo -e "${L1}${YELLOW}-----------------------------------------------------------${NC}"
#echo ""
figlet GEO PROJECT | lolcat
echo -e "\033[0;33m╔══════════════════════════════════════════════════════════╗${NC}"
echo -e "\033[0;33m║$NC$L1\033[42m                   BASIC INFORMATION                      $NC\033[0;33m║$NC"
echo -e "\033[0;33m╚══════════════════════════════════════════════════════════╝${NC}"
echo -e "\033[0;33m╔══════════════════════════════════════════════════════════╗${NC}"
echo -e "\033[0;33m║$NC$L1 Uptime Server $CYAN=$NC$L1 $uptime${NC}"
echo -e "\033[0;33m║$NC$L1 System OS     $CYAN=$NC$L1 $MODEL${NC}"
echo -e "\033[0;33m║$NC$L1 ISP           $CYAN=$NC$L1 $ISP${NC}"
echo -e "\033[0;33m║$NC$L1 CITY          $CYAN=$NC$L1 $CITY${NC}"
echo -e "\033[0;33m║$NC$L1 Usage RAM     $CYAN=$NC$L1 $RAM MB / $USAGERAM MB ${NC}"
echo -e "\033[0;33m║$NC$L1 Usage Memory  $CYAN=$NC$L1 $MEMOFREE${NC}"
echo -e "\033[0;33m║$NC$L1 LoadCPU       $CYAN=$NC$L1 $LOADCPU %${NC}"
echo -e "\033[0;33m║$NC$L1 Core System   $CYAN=$NC$L1 $CORE${NC}"
echo -e "\033[0;33m║$NC$L1 Date          $CYAN=$NC$L1 $DATEVPS${NC}"
echo -e "\033[0;33m║$NC$L1 Time          $CYAN=$NC$L1 $TIMEZONE${NC}"
echo -e "\033[0;33m║$NC$L1 IP VPS        $CYAN=$NC$L1 $MYIP${NC}"
echo -e "\033[0;33m║$NC$L1 Domain        $CYAN=$NC$L1 $domain${NC}"
echo -e "\033[0;33m║$NC$L1 Nameserver    $CYAN=$NC$L1 $NS${NC}"
echo -e "\033[0;33m║$NC$L1 License Key   $CYAN=$NC$L1 ${Status_License} ${NC}"
echo -e "\033[0;33m╚══════════════════════════════════════════════════════════╝${NC}"
echo -e "\033[0;33m╔═════════════════╗${NC}\033[0;33m╔═════════════════╗${NC}\033[0;33m╔════════════════════╗${NC}"
echo -e "\033[0;33m║ $NC$L1 SSH : $status_ssh" "$L1         NGINX : $status_nginx" "$L1         XRAY : $status_xray         $NC\033[0;33m║$NC" 
echo -e "\033[0;33m║ $NC$L1 WS-ePRO : $status_ws_epro" "$L1     BOT VPN  : $status_bot" "$L1      HAPROXY : $status_haproxy      $NC\033[0;33m║$NC" 
echo -e "\033[0;33m╚═════════════════╝${NC}\033[0;33m╚═════════════════╝${NC}\033[0;33m╚════════════════════╝${NC}"
   echo -e "\033[0;33m          ╔═════════════════════════════════════╗${NC}"
   echo -e "                       LIST ACCOUNTS ${NC}" | lolcat
   echo -e "                     ┄┅┅┅•••••••••┅┅┅┄${NC}" | lolcat
    printf "${L1}               %-10s %-3s${plain} %-3s\n" "SSH/OPENVPN     :"   "${ssh}" "ACCOUNT"
    printf "               %-10s %-3s${plain} %-3s\n" "VMESS           :"   "${vm}" "ACCOUNT"
    printf "               %-10s %-3s${plain} %-3s\n" "VLESS           :"   "${vl}" "ACCOUNT"
    printf "               %-10s %-3s${plain} %-3s\n" "TROJAN          :"   "${tr}" "ACCOUNT"
    printf "               %-10s %-3s${plain} %-3s\n" "SHADOWSOCKS     :"   "${ss}" "ACCOUNT"
   echo -e "                     ┄┅┅┅•••••••••┅┅┅┄${NC}" | lolcat
    echo -e "\033[0;33m          ╚═════════════════════════════════════╝${NC}"
#echo -e "\033[0;33m╔══════════════════════════════════════════════════════════╗${NC}"
#echo -e "\033[0;33m║ $NC$L1 SSH OVPN : ${GREEN}$ssh$NC$L1"" VMESS : ${GREEN}$vm$NC$L1"" VLESS : ${GREEN}$vl$NC$L1"" TROJAN : ${GREEN}$tr$NC$L1"" SHADWSK : ${GREEN}$ss $NC" 
#echo -e "\033[0;33m╚══════════════════════════════════════════════════════════╝${NC}"
#echo -e "\033[0;33m╔══════════════════════════════════════════════════════════╗${NC}"
#echo -e "\033[0;33m║$NC$L1\033[41m                     CREATE ACCOUNTS                      $NC\033[0;33m║$NC"
#echo -e "\033[0;33m╚══════════════════════════════════════════════════════════╝${NC}"
echo -e "\033[0;33m╔══════════════════════════════════════════════════════════╗${NC}"
echo -e "\033[0;33m║$NC [${GREEN}01${NC}]$L1 SSH / OVPN MANAGER      $NC\033[0;33m│$NC [${GREEN}07${NC}]$L1 DELL ALL EXPIRED    $NC\033[0;33m $NC\033[0;33m║$NC" 
echo -e "\033[0;33m║$NC [${GREEN}02${NC}]$L1 VMESS MANAGER           $NC\033[0;33m│$NC [${GREEN}08${NC}]$L1 AUTOREBOOT           $NC\033[0;33m║$NC"    
echo -e "\033[0;33m║$NC [${GREEN}03${NC}]$L1 VLESS MANAGER           $NC\033[0;33m│$NC [${GREEN}09${NC}]$L1 CLEAR CACHE          $NC\033[0;33m║$NC"   
echo -e "\033[0;33m║$NC [${GREEN}04${NC}]$L1 TROJAN MANAGER          $NC\033[0;33m│$NC [${GREEN}10${NC}]$L1 SPEEDTEST            $NC\033[0;33m║$NC" 
echo -e "\033[0;33m║$NC [${GREEN}05${NC}]$L1 SHADOWSOCKS MANAGER     $NC\033[0;33m│$NC [${GREEN}11${NC}]$L1 SETTINGS MANAGER     $NC\033[0;33m║$NC"
echo -e "\033[0;33m║$NC [${GREEN}06${NC}]$L1 UPDATE MANAGER          $NC\033[0;33m│$NC [${GREEN}12${NC}]$L1 CHANGE LICENSE KEY   $NC\033[0;33m║$NC"
echo -e "\033[0;33m║                                                          \033[0;33m║$NC"
echo -e "\033[0;33m║$NC [${GREEN}00${NC}]$L1 BACK TO EXIT MENU \033[1;32m<\033[1;33m<\033[1;31m<\033[1;31m$NC \E[0m\033[0;34m                              $NC\033[0;33m║$NC"
echo -e "\033[0;33m╚══════════════════════════════════════════════════════════╝${NC}"
echo -e "\033[0;33m╔══════════════════════════════════════════════════════════╗${NC}"
echo -e "\033[0;33m║$NC$L1 VERSION SCRIPT    ${CYAN} =${NC} ${L1}${VERSION}"" LTS"
echo -e "\033[0;33m║$NC$L1 LICENSE ISSUED TO ${CYAN} =${NC} ${L1}${Issue_License}"
echo -e "\033[0;33m║$NC$L1 LICENSE LIMIT     ${CYAN} =${NC} ${L1}${Limit_License} VPS"
echo -e "\033[0;33m║$NC$L1 LICENSE START     ${CYAN} =${NC} ${L1}${Start_License}"
echo -e "\033[0;33m║$NC$L1 LICENSE EXPIRED   ${CYAN} =${NC} ${L1}${End_License} (${GREEN} $(if [[ ${Sisa_Hari_Masa_Aktif} -lt 5 ]]; then
echo -e "\033[0;33m $NC$NC ${RED}${Sisa_Hari_Masa_Aktif} Days Left ${NC}"; else
echo -e "\033[0;33m$NC${GREEN}${Sisa_Hari_Masa_Aktif} ${NC}${L1}Days Left"; fi
)${NC} )"
echo -e "\033[0;33m╚══════════════════════════════════════════════════════════╝${NC}"
echo
read -p " Select menu : " opt
echo -e ""
case $opt in
1 | 01)
clear
m-sshws
;;
2 | 02)
clear
m-vmess
;;
3 | 03)
clear
m-vless
;;
4 | 04)
clear
m-trojan
;;
5 | 05)
clear
m-ssws
;;
6 | 06)
clear
wget https://jaka1m.github.io/project/ssh/update.sh; bash update.sh
;;
7 | 07)
clear
xp
;;
8 | 08)
clear
autoreboot
;;
9 | 09)
clear
clearcache
;;
10)
clear
speedtest
;;
11)
clear
settings
;;
12)
clear
read -p "Input Your License Key : " Input_License_Key

        # // Checking Input Blank
        if [[ $Input_License_Key ==  "" ]]; then
            echo -e "${EROR} Please Input License Key !${NC}"
            exit 1
        fi

        # // Checking License Validate
        Key="$Input_License_Key"
        clear

        # // Algoritma Key
algoritmakeys="1920212223242526272829303132333" 
hashsuccess="$(echo -n "$Key" | sha256sum | cut -d ' ' -f 1)" 
Sha256Successs="$(echo -n "$hashsuccess$algoritmakeys" | sha256sum | cut -d ' ' -f 1)" 
License_Key=$Sha256Successs
        echo ""
        echo -e "${OKEY} Successfull Connected To VPS"
        sleep 1

        # // Validate Result
        Getting_Data_On_Server=$( curl -s https://${Server_URLL}/registered.txt | grep $License_Key | cut -d ' ' -f 1 )
        if [[ "$Getting_Data_On_Server" == "$License_Key" ]]; then
            mkdir -p /etc/${Auther}/
            echo "$License_Key" > /etc/${Auther}/license.key
            echo -e "${OKEY} License Validated !"
            sleep 1
        else
            echo -e "${EROR} Your License Key Not Valid !"
            exit 1
        fi
        clear
        echo -e "${OKEY} Successfull Changed License Key to ${GREEN}$Input_License_Key ${NC}"
        echo -e ""
        read -n 1 -s -r -p "Press any key to back on menu"

menu
;;
0 | 00)
clear
figlet GEO PROJECT | lolcat
exit
;;
x)
menu
;;
*)
echo -e ""
menu
;;
esac
