#!/bin/bash
# //====================================================
# //	System Request:Debian 9+/Ubuntu 18.04+/20+
# //	Author:	Geo Project
# //	Dscription: Xray Menu Management
# //	email: admin@geolstore.net
# //  telegram: https://t.me/tau_samawa
# //====================================================

# // Root Checking
if [ "${EUID}" -ne 0 ]; then
		echo -e "${EROR} Please Run This Script As Root User !"
		exit 1
fi

# // Export Color & Information
export RED='\033[0;31m'
export GREEN='\033[0;32m'
export YELLOW='\033[0;33m'
export BLUE='\033[0;34m'
export PURPLE='\033[0;35m'
export CYAN='\033[0;36m'
export LIGHT='\033[0;37m'
export NC='\033[0m'
OR='\033[0;34m'
Lred='\e[91m'
LLgreen='\e[92m'
Lyellow='\e[93m'
yellow="\033[1;33m"
green="\e[92;1m"
yellow="\033[1;33m"
cyan="\033[1;36m"

# // Export Banner Status Information
export EROR="[${RED} ERROR ${NC}]"
export INFO="[${YELLOW} INFO ${NC}]"
export OKEY="[${GREEN} OKEY ${NC}]"
export PENDING="[${YELLOW} PENDING ${NC}]"
export SEND="[${YELLOW} SEND ${NC}]"
export RECEIVE="[${YELLOW} RECEIVE ${NC}]"

# // Export Align
export BOLD="\e[1m"
export WARNING="${RED}\e[5m"
export UNDERLINE="\e[4m"

# // Exporting URL Host
export Server_URLL="raw.githubusercontent.com/jaka1m/perizinan/main"
export Server_Port="443"
export Server_IP="underfined"
export Script_Mode="Stable"
export Auther="geovpn"
MYIP=$(curl -sS ipv4.icanhazip.com)
domain=$(cat /etc/xray/domain)

# // Exporting IP Address
export IP=$( curl -sS ipinfo.io/ip )

# // Exporting Network Interface
export NETWORK_IFACE="$(ip route show to default | awk '{print $5}')"

# // Validate Result ( 1 )
touch /etc/${Auther}/license.key
export Your_License_Key="$( cat /etc/${Auther}/license.key | awk '{print $1}' )"
export Validated_Your_License_Key_With_Server="$( curl -s https://${Server_URLL}/registered.txt | grep -w $Your_License_Key | head -n1 | cut -d ' ' -f 1 )"
if [[ "$Validated_Your_License_Key_With_Server" == "$Your_License_Key" ]]; then
    validated='true'
else
    echo -e "${EROR} License Key Not Valid"
    exit 1
fi

# // Checking Script Expired
exp=$( curl -s https://${Server_URLL}/registered.txt | grep -w $Your_License_Key | cut -d ' ' -f 4 )
now=`date -d "0 days" +"%Y-%m-%d"`
expired_date=$(date -d "$exp" +%s)
now_date=$(date -d "$now" +%s)
sisa_hari=$(( ($expired_date - $now_date) / 86400 ))
if [[ $sisa_hari -lt 0 ]]; then
    echo $sisa_hari > /etc/${Auther}/license-remaining-active-days.db
    echo -e "${EROR} Your License Key Expired ( $sisa_hari Days )"
    exit 1
else
    echo $sisa_hari > /etc/${Auther}/license-remaining-active-days.db
fi
clear
function convert() {
    local -i bytes=$1
    if [[ $bytes -lt 1024 ]]; then
        echo "${bytes}B"
    elif [[ $bytes -lt 1048576 ]]; then
        echo "$(((bytes + 1023) / 1024))KB"
    elif [[ $bytes -lt 1073741824 ]]; then
        echo "$(((bytes + 1048575) / 1048576))MB"
    else
        echo "$(((bytes + 1073741823) / 1073741824))GB"
    fi
}

clear
chngelimit() {
    clear
    echo -e "  ${cyan}=======================================${NC}"
    printf "\e[1;92m    ⚜⚜\e[0m\e[1;77m Chnge Xray/Vmess Account \e[1;92m⚜⚜\e[0m\n"
    echo -e "  ${cyan}=======================================${NC}"
    NUMBER_OF_CLIENTS=$(grep -c -E "^### " "/etc/vmess/.vmess.db")
    if [[ ${NUMBER_OF_CLIENTS} == '0' ]]; then
        echo ""
        echo "       No customer name available"
        echo ""
        exit 0
    fi
    echo ""
    echo "     NO  USERNAME     EXPIRED"
    echo -e "  ${cyan}===============================${NC}"
    grep -E "^### " "/etc/vmess/.vmess.db" | cut -d ' ' -f 2-3 | column -t | nl -s ') '
    until [[ ${CLIENT_NUMBER} -ge 1 && ${CLIENT_NUMBER} -le ${NUMBER_OF_CLIENTS} ]]; do
        if [[ ${CLIENT_NUMBER} == '1' ]]; then
            read -rp "Select one client [1]: " CLIENT_NUMBER
        else
            echo ""
            until [[ $CLIENT_NUMBER =~ ^[0-9]+$ ]]; do
                 read -rp "     Select one client [1-${NUMBER_OF_CLIENTS}]: " CLIENT_NUMBER
            done
            user=$(grep -E "^### " "/etc/vmess/.vmess.db" | cut -d ' ' -f 2 | sed -n "${CLIENT_NUMBER}"p)
            clear
            until [[ $Quota =~ ^[0-9]+$ ]]; do
                read -p "Limit User (GB): " Quota
            done
            until [[ $iplim =~ ^[0-9]+$ ]]; do
                read -p "Limit User (IP): " iplim
            done

            if [ ! -e /etc/vmess ]; then
                mkdir -p /etc/vmess
            fi
            if [ -z ${iplim} ]; then
                iplim="0"
            fi
            if [ -z ${Quota} ]; then
                Quota="0"
            fi
            c=$(echo "${Quota}" | sed 's/[^0-9]*//g')
            d=$((${c} * 1024 * 1024 * 1024))
            if [[ ${c} != "0" ]]; then
                echo "${d}" >/etc/vmess/${user}
                echo "${iplim}" >/etc/vmess/${user}IP
            fi
            clear
            echo -e "  ${cyan}=======================================${NC}"
            echo -e "Chnge Vmess Account Username ${green}$user${NC} Successfully"
            echo -e "limit Quota $Quota GB limit Login IP $iplim Device"
            echo -e "  ${cyan}=======================================${NC}"
            echo ""
            exit
        fi
    done

}
log-ws() {
    clear
    echo -e "  ${cyan}=======================================${NC}"
    printf "\e[1;92m    ⚜⚜\e[0m\e[1;77m log Xray/Vmess Account \e[1;92m⚜⚜\e[0m\n"
    echo -e "  ${cyan}=======================================${NC}"
    NUMBER_OF_CLIENTS=$(grep -c -E "^### " "/etc/vmess/.vmess.db")
    if [[ ${NUMBER_OF_CLIENTS} == '0' ]]; then
        echo ""
        echo "       No customer name available"
        echo ""
        exit 0
    fi
    echo ""
    echo "     NO  USERNAME     EXPIRED"
    echo -e "  ${cyan}===============================${NC}"
    grep -E "^### " "/etc/vmess/.vmess.db" | cut -d ' ' -f 2-3 | column -t | nl -s ') '
    until [[ ${CLIENT_NUMBER} -ge 1 && ${CLIENT_NUMBER} -le ${NUMBER_OF_CLIENTS} ]]; do
        if [[ ${CLIENT_NUMBER} == '1' ]]; then
            read -rp "Select one client [1]: " CLIENT_NUMBER
        else
            echo ""
            until [[ $CLIENT_NUMBER =~ ^[0-9]+$ ]]; do
                 read -rp "     Select one client [1-${NUMBER_OF_CLIENTS}]: " CLIENT_NUMBER
            done
            user=$(grep -E "^### " "/etc/vmess/.vmess.db" | cut -d ' ' -f 2 | sed -n "${CLIENT_NUMBER}"p)
            clear
            cat /var/log/xray/access.log | grep $user
            exit
        fi
    done
}
detail-ws() {
    clear
    echo -e "  ${cyan}=======================================${NC}"
    printf "\e[1;92m    ⚜⚜\e[0m\e[1;77m Detail Xray/Vmess Account \e[1;92m⚜⚜\e[0m\n"
    echo -e "  ${cyan}=======================================${NC}"
    NUMBER_OF_CLIENTS=$(grep -c -E "^### " "/etc/vmess/.vmess.db")
    if [[ ${NUMBER_OF_CLIENTS} == '0' ]]; then
        echo ""
        echo "       No customer name available"
        echo ""
        exit 0
    fi
    echo ""
    echo "     NO  USERNAME     EXPIRED"
    echo -e "  ${cyan}===============================${NC}"
    grep -E "^### " "/etc/vmess/.vmess.db" | cut -d ' ' -f 2-3 | column -t | nl -s ') '
    until [[ ${CLIENT_NUMBER} -ge 1 && ${CLIENT_NUMBER} -le ${NUMBER_OF_CLIENTS} ]]; do
        if [[ ${CLIENT_NUMBER} == '1' ]]; then
            read -rp "Select one client [1]: " CLIENT_NUMBER
        else
            echo ""
            until [[ $CLIENT_NUMBER =~ ^[0-9]+$ ]]; do
                 read -rp "     Select one client [1-${NUMBER_OF_CLIENTS}]: " CLIENT_NUMBER
            done
            user=$(grep -E "^### " "/etc/vmess/.vmess.db" | cut -d ' ' -f 2 | sed -n "${CLIENT_NUMBER}"p)
            clear
            cat /etc/xray/log-create-${user}.log
            exit
        fi
    done

}

mem-ws() {
    clear
    echo -e "  ${cyan}=======================================${NC}"
    printf "\e[1;92m    ⚜⚜\e[0m\e[1;77m Member Xray/Vmess Account \e[1;92m⚜⚜\e[0m\n"
    echo -e "  ${cyan}=======================================${NC}"
    echo ""
    echo -e "   username     day.left   ip      quota"
    echo -e "  ${cyan}=======================================${NC}"
    data=($(cat /etc/vmess/.vmess.db | grep '^###' | cut -d ' ' -f 2 | sort | uniq))
    now=$(date +"%Y-%m-%d")
    for user in "${data[@]}"; do
        exp=$(grep -w "^### $user" "/etc/vmess/.vmess.db" | cut -d ' ' -f 3 | sort | uniq)
        d1=$(date -d "$exp" +%s)
        d2=$(date -d "$now" +%s)
        dayleft=$((($d1 - $d2) / 86400))
        if [[ -e /etc/limit/vmess/${user} ]]; then
            byt=$(cat /etc/limit/vmess/${user})
            gb=$(convert ${byt})
        else
            gb=""
        fi
        res=$(cat /etc/vmess/${user}IP)
        if [[ "$dayleft" -le "500" ]]; then
            printf "\e[1m  %-13s %-7s %-8s %2s\n\e[22m" " $user" "| $dayleft" "|  $res" "|  $gb"
            printf "$cyan  %-13s %-7s %-8s %2s\n${cyan}${NC}" "======================================="

        fi
    done
    echo ""

}
           
green="\e[92;1m"
NC='\033[0m'
echo -e "\033[0;34m┌───────────────────────────────┐\033[0m"
echo -e "\033[0;34m│$NC$L1\033[41m       MENU MANAGER VMESS      $NC\033[0;34m│$NC"
echo -e "\033[0;34m└───────────────────────────────┘\033[0m"
echo -e "\033[0;34m┌───────────────────────────────┐\033[0m"
echo -e "\033[0;34m│$NC [${GREEN}01${NC}]$L1 Creating a Vmess Account${NC}"
echo -e "\033[0;34m│$NC [${GREEN}02${NC}]$L1 Delete Vmess Account${NC}"
echo -e "\033[0;34m│$NC [${GREEN}03${NC}]$L1 Renew Vmess Account${NC}"
echo -e "\033[0;34m│$NC [${GREEN}04${NC}]$L1 Check Vmess login Account${NC}"
echo -e "\033[0;34m│$NC [${GREEN}05${NC}]$L1 Member Vmess Account${NC}"
echo -e "\033[0;34m│$NC [${GREEN}06${NC}]$L1 Chnge Vmess limit Account${NC}"
echo -e "\033[0;34m│$NC [${GREEN}07${NC}]$L1 Log Vmess login Account${NC}"
echo -e "\033[0;34m│$NC [${GREEN}08${NC}]$L1 Detail Vmess Account${NC}"
echo -e "\033[0;34m│$NC [${GREEN}09${NC}]$L1 Trial Vmess Account${NC}"
echo -e "\033[0;34m│$NC "
echo -e "\033[0;34m│$NC [${GREEN}00${NC}]$L1 Back to Menu \033[1;32m<\033[1;33m<\033[1;31m<\033[1;31m$NC \E[0m\033[0;34m $NC"
echo -e "\033[0;34m└───────────────────────────────┘\033[0m"
echo -e ""
read -p "Select From Options [ 1 - 9 ] : " menu
case $menu in
1 | 01)
    addws
    ;;
2 | 02)
    delws
    ;;
3 | 03)
    renewws
    ;;
4 | 04)
    cekws
    ;;
5 | 05)
    mem-ws
    ;;
6 | 06)
    chngelimit
    ;;
7 | 07)
    log-ws
    ;;
8 | 08)
    detail-ws
    ;;
9 | 09)
    trialws
    ;;
0 | 00)
clear
menu
       ;;
*)
echo -e ""
m-vmess
;;
esac
